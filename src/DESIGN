This file describes the design and structure of Marble

1. The main structure
=====================

Marble, the application, consists two main widgets: 
  - a MarbleWidget      that contains the view of the world, and
  - a MarbleControlBox  that controls it.

The MarbleWidget is a view for the model represented by the MarbleModel
class, which contains all the data necessary for manipulating and
displaying the map.

FIXME: Currently the view creates the model, but this will be changed
       very soon.  The model/view separation is not perfect, so we are
       working on it.  In the future, the main program will be able to
       create the model and then create the view and controller with 
       a pointer to the model as a parameter.  This will allow the 
       model to have several views with separate sizes, orientations 
       and even projections (flat and spherical, for instance).
       A convenience class "MarbleWidget" will be provided to 
       accomplish this out of the box (currently this class is 
       named "KAtlasControl").

2. The World Model
==================

The model of the world consists of 3 different parts, which can be
viewed as separate layers:

 - A pixel based area that is split up into tiles.  Depending on the
   topic these tiles are produced from different data sources, either
   from satellite scans or from photographs.
   The tiles are stored in several different resolutions that are used
   in different zoom levels. The tiles are automatically generated 
   the first time that the application is started, and are stored into 
   $HOME/.marble/data/maps. For packaging purposes or to offer the 
   same data to multiple users you can move these tiles into the 
   system directory where marble gets installed (e.g. 
   /usr/share/apps/marble/data/maps).

   The main class of the tiles layer is the TextureMapper, which maps
   a tiled texture onto the projected sphere.

 - Vectors that represent different kinds of borders -- geographical
   or political -- or features.  Geographical borders can be
   coastlines, islands or lakes, but also rivers.  Political borders
   are mostly countries, but also the states of the USA.  Special
   features include the grid of lines that show the latitude and
   longitude as well as the tropics and arctics.

   The main classes of the vectors are the GeoPolygon and the PntMap,
   which contain the actual vectors, but also a bounding box
   that specifies which area is being covered by each polygon.

 - Points of interest.  Right now these are mostly cities, but also 
   some mountains. 

   The main class of the points is the PlaceMark with a somewhat
   arbitrary selection of properties. Another important class is the
   PlaceContainer which collects a number of PlaceMarks into a
   container, just like the name suggests.

   There's a special case that should be pointed out -- especially since
   it happens with Marble's default map:
   The Topographical Atlas View provides a special map in terms of 
   composition: While for the other map views the 3 layers are painted 
   in simple bottom top order the Topographical Atlas View "merges" the 
   Texture (which contains the digital elevation data) and a Vector 
   Layer to create a recolorized bumpmapped layer via the 
   TextureColorizer class.
   All map views and their use of layers get specified in a 
   *.dgml-XML file. The source format for the placemark layer is 
   Google Earth's KML file format which gets parsed and cached into 
   a temporary binary file for faster follow-up reading.


2.1 The Tile System
-------------------


FIXME: To be written...


2.2 The Vector System
---------------------

FIXME: To be written...

FIXME: Explain the way nodes get filtered e.g. by ClipPainter.

FIXME: Explain the differences between the GeoPolygon and the
       ScreenPolygon, and how they interact.  Also the PntMap and the
       VectorMap.


2.3 Placemarks
--------------

FIXME: To be written...

FIXME: Explain how PlaceMark labels are placed so they don't cover each 
other.

3. The Painting Process
=======================

FIXME: To be written...


4. The Basic Building Blocks
============================

Quaternions
GeoPoint, GeoPolygon, PntMap
ScreenPolygon, VectorMap


5. Class Overview
=================

Here follows now a list of classes, their roles and how they interact.

Basic classes
-------------

Quaternion	A simple implementation of the mathematical concept
		quaternion. 

GeoPoint	A point on the earth, (lon, lat)
GeoPolygon	A path or polygon on the earth, consisting of a vector
		of GeoPoints
PntMap		A collection of GeoPolygons ( QVector<GeoPolygon *> )
		FIXME: Rename and move from GeoPolygon.h into own file.

ScreenPolygon	A path or polygon on the screen. Uses screen
		coordinates.  Uses floats due to antialiasing.
VectorMap	A Vector of ScreenPolygons.
		Rename   FIXME
GridMap		The grid of lat-lon lines on the map.
		Another Vector of ScreenPolygons. Perhaps it should
		inherit or contain a VectorMap.

PlaceMark	A point on the earth with some additional data. Can be
		selected and manipulated. Has a name. Today mostly
		used for cities of different size.
		At this point somewhat arbitrary in its choice of
		properties.  Contains (among others):
		 - Coordinate (GeoPoint)
		 - Role (QChar) -- city, capital, etc
		 - Population (int)
		 - Description (QString)
		 - Countrycode (QString)
		 - View stuff (selected, labelstring, boundingbox, etc)

PlaceContainer	A list of PlaceMarks ( QVector<Placemark *> )


Model / View
------------

MarbleModel	The main model.  Contains (among others):
		 - MapTheme
		 - GridMap
                 - VectorComposer
		 - PlaceMarkManager
		 - PlaceMarkModel

VectorComposer	Manages the different vector sub-layers which consist 
                of coastlines, islands, lakes, glaciers, rivers
                as well as borders for the countries and the US
                States.  These are all stored in PntMaps, one for each
                type.  FIXME: Change Name.

MarbleWidget	The view of a MarbleModel.


Widgets
-------
KAtlasControl	The main window.  Contains a MarbleWidget and a
		MarbleControlBox.


Unsorted
--------

class ClipPainter;
class HttpFetchFile;
class KAtlasAboutDialog : public QDialog, private Ui::katlasAboutDialog {
class KAtlasCrossHair : public QObject {
class KAtlasDirs
class KAtlasFlag : public QObject {
class KAtlasMapScale : public QObject {
class KAtlasThemeSelectView : public QListView {
class KAtlasTileCreatorDialog : public QDialog, private Ui::KAtlasTileCreatorDialog {
class KAtlasTileCreatorDialog: public Ui_KAtlasTileCreatorDialog {};
class KAtlasViewInputHandler;
class KAtlasViewPopupMenu;
class KAtlasWindRose : public QObject {
class KAtlasXmlHandler : public QXmlDefaultHandler {
class MapTheme : public QObject
class MeasureTool;
class PlaceFolder : public QVector<PlaceMark*> {
class PlaceMarkInfoDialog: public Ui_PlaceMarkInfoDialog {};
class PlaceMarkManager;
class PlaceMarkModel : public QAbstractListModel {
class PlaceMarkPainter : public QObject {
class QAbstractItemModel;
class QMenu;
class QStandardItemModel;
class SearchComboBox : public QComboBox {
class SearchListView : public QListView {
class TextureColorizer;
class TextureLoader;
class TextureMapper {
class TextureTile;
class TileScissor : public QObject {
class TinyWebBrowser : public QTextBrowser {
class katlasAboutDialog: public Ui_katlasAboutDialog {};
